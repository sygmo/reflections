What happens when you initialize a repository? Why do you need to do it?

Initializing a repository creates a default repo with no commits. Creating
one will allow current and future versions of the code to be saved.



How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The staging area contains files that have not yet been added or synced to the
repository, but does not necessarily contain all updated files from the
working directory. This is helpful, because it allows you to choose which 
files you want to sync and which you don't.



How can you use the staging area to make sure you have one commit per
logical change?

You can check to be sure that you're not commiting too many files at once.
Also, diff --staged can be used to check the changes made with the most
recent commit in the repository.



What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Branches would help if I wanted to create an experimental new feature, but
I still want to keep a working version of the code I've already written.
Branches allow me to commit code based on the master branch without actually
altering the master branch.



How do the diagrams help you visualize the branch structure?

I can more easily see which commits are part of each branch, and which 
commits are unreachable.



What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Any additional commits from the merged branch are added to the master branch.
Code that was deleted from either branch remains deleted. Both original 
branches become the parents of the new mergerd branch, and the commits are
sorted by timestamp. 



Git Commands:
	diff -u
	clone
	checkout
	log - shows list of all commits
	status - shows files that have changed since last commit
	add
	reset
	branch - shows all checked out branches
	branch -d - deletes branch
	merge
	show

git log --graph --oneline master branch_name  (visual representation of commit history)